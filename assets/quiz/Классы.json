{
    "quiz": {
        "total_points": 30,
        "points_scored": 0,
        "questions": [
            {
                "question": "Что такое класс в C++?",
                "options": [
                    "Шаблон для создания объектов",
                    "Спецификация функций",
                    "Тип данных",
                    "Структура данных"
                ],
                "correct_answer": "Шаблон для создания объектов",
                "points": 1,
                "difficulty": "easy"
            },
            {
                "question": "Как объявить класс в C++?",
                "options": [
                    "class MyClass { };",
                    "struct MyClass { };",
                    "MyClass { };",
                    "class = MyClass { };"
                ],
                "correct_answer": "class MyClass { };",
                "points": 1,
                "difficulty": "easy"
            },
            {
                "question": "Что такое конструктор класса?",
                "options": [
                    "Функция, которая вызывается при создании объекта класса",
                    "Функция, которая вызывается при уничтожении объекта класса",
                    "Статическая функция класса",
                    "Виртуальная функция класса"
                ],
                "correct_answer": "Функция, которая вызывается при создании объекта класса",
                "points": 1,
                "difficulty": "easy"
            },
            {
                "question": "Какой модификатор доступа используется по умолчанию для элементов класса в C++?",
                "options": [
                    "private",
                    "protected",
                    "public",
                    "static"
                ],
                "correct_answer": "private",
                "points": 1,
                "difficulty": "easy"
            },
            {
                "question": "Что такое деструктор класса?",
                "options": [
                    "Функция, которая вызывается при уничтожении объекта класса",
                    "Функция, которая вызывается при создании объекта класса",
                    "Статическая функция класса",
                    "Виртуальная функция класса"
                ],
                "correct_answer": "Функция, которая вызывается при уничтожении объекта класса",
                "points": 1,
                "difficulty": "easy"
            },
            {
                "question": "Какой модификатор доступа используется для закрытых элементов класса?",
                "options": [
                    "private",
                    "protected",
                    "public",
                    "static"
                ],
                "correct_answer": "private",
                "points": 1,
                "difficulty": "easy"
            },
            {
                "question": "Как правильно вызвать конструктор базового класса из конструктора производного класса?",
                "options": [
                    "DerivedClass::DerivedClass() : BaseClass() { }",
                    "BaseClass::BaseClass() : DerivedClass() { }",
                    "DerivedClass::DerivedClass() : BaseClass { }",
                    "BaseClass::BaseClass() : DerivedClass { }"
                ],
                "correct_answer": "DerivedClass::DerivedClass() : BaseClass() { }",
                "points": 2,
                "difficulty": "medium"
            },
            {
                "question": "Что такое конструктор по умолчанию в классе?",
                "options": [
                    "Конструктор, который принимает аргументы по умолчанию",
                    "Конструктор, который не принимает аргументов",
                    "Конструктор, который устанавливает значения по умолчанию",
                    "Конструктор, который вызывается по умолчанию при создании объекта"
                ],
                "correct_answer": "Конструктор, который вызывается по умолчанию при создании объекта",
                "points": 2,
                "difficulty": "medium"
            },
            {
                "question": "Какой модификатор доступа используется для открытых элементов класса?",
                "options": [
                    "public",
                    "protected",
                    "private",
                    "static"
                ],
                "correct_answer": "public",
                "points": 2,
                "difficulty": "medium"
            },
            {
                "question": "Что такое статическое поле класса?",
                "options": [
                    "Поле, которое доступно только внутри класса",
                    "Поле, которое разделяется между всеми объектами класса",
                    "Поле, которое может быть изменено только конструктором",
                    "Поле, которое является константой"
                ],
                "correct_answer": "Поле, которое разделяется между всеми объектами класса",
                "points": 2,
                "difficulty": "medium"
            },
            {
                "question": "Что такое виртуальная функция в классе?",
                "options": [
                    "Функция, которая может быть перегружена",
                    "Функция, которая может быть вызвана извне класса",
                    "Функция, которая может быть изменена дочерними классами",
                    "Функция, которая может быть переопределена в дочерних классах"
                ],
                "correct_answer": "Функция, которая может быть переопределена в дочерних классах",
                "points": 2,
                "difficulty": "medium"
            },
            {
                "question": "Что такое абстрактный класс в C++?",
                "options": [
                    "Класс, который не может иметь объекты",
                    "Класс, который не имеет реализации одной или нескольких его функций",
                    "Класс, который имеет только одну функцию",
                    "Класс, который может быть унаследован только другими абстрактными классами"
                ],
                "correct_answer": "Класс, который имеет реализацию одной или нескольких его функций",
                "points": 2,
                "difficulty": "medium"
            },
            {
                "question": "Что такое полиморфизм в C++?",
                "options": [
                    "Возможность класса наследовать от нескольких классов",
                    "Возможность класса переопределять функции базового класса",
                    "Возможность объектов различных классов иметь одинаковые имена",
                    "Возможность одной функции иметь различное количество аргументов"
                ],
                "correct_answer": "Возможность объектов различных классов иметь одинаковые имена",
                "points": 2,
                "difficulty": "medium"
            },
            {
                "question": "Как объявить метод класса вне самого класса?",
                "options": [
                    "ReturnType ClassName::MethodName() { }",
                    "ClassName::ReturnType MethodName() { }",
                    "ReturnType MethodName() { }",
                    "ClassName.MethodName() { }"
                ],
                "correct_answer": "ReturnType ClassName::MethodName() { }",
                "points": 2,
                "difficulty": "medium"
            },
            {
                "question": "Что такое дружественная функция в классе?",
                "options": [
                    "Функция, которая может получить доступ к закрытым членам класса",
                    "Функция, которая находится за пределами класса",
                    "Функция, которая объявлена внутри класса",
                    "Функция, которая является виртуальной"
                ],
                "correct_answer": "Функция, которая может получить доступ к закрытым членам класса",
                "points": 2,
                "difficulty": "medium"
            },
            {
                "question": "Как объявить класс-наследник в C++?",
                "options": [
                    "class DerivedClass : BaseClass { };",
                    "class DerivedClass { : BaseClass };",
                    "class BaseClass :: DerivedClass { };",
                    "class DerivedClass -> BaseClass { };"
                ],
                "correct_answer": "class DerivedClass : BaseClass { };",
                "points": 3,
                "difficulty": "hard"
            },
            {
                "question": "Что такое множественное наследование в C++?",
                "options": [
                    "Возможность класса иметь более одного конструктора",
                    "Возможность класса иметь более одного деструктора",
                    "Возможность класса наследовать от более одного базового класса",
                    "Возможность класса наследовать от другого класса несколько раз"
                ],
                "correct_answer": "Возможность класса наследовать от более одного базового класса",
                "points": 3,
                "difficulty": "hard"
            },
            {
                "question": "Что такое виртуальный деструктор в C++?",
                "options": [
                    "Деструктор, который может быть перегружен",
                    "Деструктор, который вызывается автоматически при уничтожении объекта",
                    "Деструктор, который может быть переопределен в производных классах",
                    "Деструктор, который является виртуальной функцией"
                ],
                "correct_answer": "Деструктор, который может быть переопределен в производных классах",
                "points": 3,
                "difficulty": "hard"
            },
            {
                "question": "Что такое динамическое приведение типов в C++?",
                "options": [
                    "Возможность изменять тип переменной во время выполнения программы",
                    "Возможность привести тип объекта к его базовому типу",
                    "Возможность создавать объекты различных типов",
                    "Возможность использовать шаблоны для создания объектов"
                ],
                "correct_answer": "Возможность привести тип объекта к его базовому типу",
                "points": 3,
                "difficulty": "hard"
            }
        ]
    }
}

